/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface JobInterface extends ethers.utils.Interface {
  functions: {
    "COMPLETED_TIMEOUT_SECONDS()": FunctionFragment;
    "DAO_FEE()": FunctionFragment;
    "MINIMUM_BOUNTY()": FunctionFragment;
    "MINIMUM_SPLIT_CHUNK_PERCENTAGE()": FunctionFragment;
    "REPORT_DEPOSIT()": FunctionFragment;
    "REPORT_REWARD_PERCENT()": FunctionFragment;
    "REPORT_TOKEN()": FunctionFragment;
    "RESOLUTION_FEE_PERCENTAGE()": FunctionFragment;
    "acceptReport(uint256,string)": FunctionFragment;
    "approveJob(uint256)": FunctionFragment;
    "cancelJob(uint256)": FunctionFragment;
    "closeJob(uint256)": FunctionFragment;
    "completeJob(uint256)": FunctionFragment;
    "completeTimedOutJob(uint256)": FunctionFragment;
    "daoTreasury()": FunctionFragment;
    "declineReport(uint256,string)": FunctionFragment;
    "disputeJob(uint256)": FunctionFragment;
    "disputeResolver()": FunctionFragment;
    "getAllPaymentTokens()": FunctionFragment;
    "getDisputePayouts(uint256)": FunctionFragment;
    "getJobPayouts(uint256)": FunctionFragment;
    "jobCount()": FunctionFragment;
    "jobs(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentTokens(address)": FunctionFragment;
    "postJob(address,uint256,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reportJob(uint256,uint256)": FunctionFragment;
    "reports(uint256)": FunctionFragment;
    "resolveDisputeForEngineer(uint256)": FunctionFragment;
    "resolveDisputeForSupplier(uint256)": FunctionFragment;
    "resolveDisputeWithCustomSplit(uint256,uint256)": FunctionFragment;
    "setDaoFee(uint256)": FunctionFragment;
    "setDaoTreasury(address)": FunctionFragment;
    "setJobTimeout(uint256)": FunctionFragment;
    "setMinBounty(uint256)": FunctionFragment;
    "setMinChunk(uint256)": FunctionFragment;
    "setReportDeposit(uint256)": FunctionFragment;
    "setReportReward(uint256)": FunctionFragment;
    "setReportToken(address)": FunctionFragment;
    "setResolutionFee(uint256)": FunctionFragment;
    "setResolver(address)": FunctionFragment;
    "startJob(uint256,uint256)": FunctionFragment;
    "tokensList(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePaymentTokens(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COMPLETED_TIMEOUT_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DAO_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_BOUNTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_SPLIT_CHUNK_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPORT_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPORT_REWARD_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPORT_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESOLUTION_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptReport",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTimedOutJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "daoTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "declineReport",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPaymentTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputePayouts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobPayouts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "postJob",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportJob",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDisputeForEngineer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDisputeForSupplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDisputeWithCustomSplit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setJobTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBounty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinChunk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolutionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setResolver", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startJob",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaymentTokens",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLETED_TIMEOUT_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DAO_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_BOUNTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_SPLIT_CHUNK_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPORT_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPORT_REWARD_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPORT_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESOLUTION_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approveJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTimedOutJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputeJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputePayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reportJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveDisputeForEngineer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDisputeForSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDisputeWithCustomSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDaoFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDaoTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJobTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBounty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinChunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymentTokens",
    data: BytesLike
  ): Result;

  events: {
    "JobApproved(uint256,uint256)": EventFragment;
    "JobCanceled(uint256)": EventFragment;
    "JobClosed(uint256)": EventFragment;
    "JobClosedByEngineer(uint256)": EventFragment;
    "JobClosedBySupplier(uint256)": EventFragment;
    "JobCompleted(uint256)": EventFragment;
    "JobDelisted(uint256,address,string)": EventFragment;
    "JobDisputeResolved(uint256,uint8)": EventFragment;
    "JobDisputed(uint256)": EventFragment;
    "JobPosted(uint256,uint256)": EventFragment;
    "JobReportDeclined(uint256,address,string)": EventFragment;
    "JobReported(uint256,address,uint256)": EventFragment;
    "JobStarted(address,uint256)": EventFragment;
    "JobSupplied(address,uint256)": EventFragment;
    "JobTimeoutPayout(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentTokensUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JobApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobClosedByEngineer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobClosedBySupplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobDisputeResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobDisputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobReportDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobReported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobSupplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobTimeoutPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokensUpdated"): EventFragment;
}

export type JobApprovedEvent = TypedEvent<
  [BigNumber, BigNumber] & { jobId: BigNumber; payoutAmount: BigNumber }
>;

export type JobCanceledEvent = TypedEvent<[BigNumber] & { jobId: BigNumber }>;

export type JobClosedEvent = TypedEvent<[BigNumber] & { jobId: BigNumber }>;

export type JobClosedByEngineerEvent = TypedEvent<
  [BigNumber] & { jobId: BigNumber }
>;

export type JobClosedBySupplierEvent = TypedEvent<
  [BigNumber] & { jobId: BigNumber }
>;

export type JobCompletedEvent = TypedEvent<[BigNumber] & { jobId: BigNumber }>;

export type JobDelistedEvent = TypedEvent<
  [BigNumber, string, string] & {
    jobId: BigNumber;
    reporter: string;
    reason: string;
  }
>;

export type JobDisputeResolvedEvent = TypedEvent<
  [BigNumber, number] & { jobId: BigNumber; finalState: number }
>;

export type JobDisputedEvent = TypedEvent<[BigNumber] & { jobId: BigNumber }>;

export type JobPostedEvent = TypedEvent<
  [BigNumber, BigNumber] & { jobId: BigNumber; metadataDigest: BigNumber }
>;

export type JobReportDeclinedEvent = TypedEvent<
  [BigNumber, string, string] & {
    jobId: BigNumber;
    reporter: string;
    reason: string;
  }
>;

export type JobReportedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    jobId: BigNumber;
    reporter: string;
    metadataDigest: BigNumber;
  }
>;

export type JobStartedEvent = TypedEvent<
  [string, BigNumber] & { engineer: string; jobId: BigNumber }
>;

export type JobSuppliedEvent = TypedEvent<
  [string, BigNumber] & { supplier: string; jobId: BigNumber }
>;

export type JobTimeoutPayoutEvent = TypedEvent<
  [BigNumber, BigNumber] & { jobId: BigNumber; payoutAmount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PaymentTokensUpdatedEvent = TypedEvent<
  [string, boolean] & { token: string; value: boolean }
>;

export class Job extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: JobInterface;

  functions: {
    COMPLETED_TIMEOUT_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DAO_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_BOUNTY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_SPLIT_CHUNK_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REPORT_DEPOSIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    REPORT_REWARD_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    REPORT_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    RESOLUTION_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptReport(
      jobId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeTimedOutJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoTreasury(overrides?: CallOverrides): Promise<[string]>;

    declineReport(
      jobId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputeResolver(overrides?: CallOverrides): Promise<[string]>;

    getAllPaymentTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getDisputePayouts(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { forWinner: BigNumber; forDao: BigNumber }
    >;

    getJobPayouts(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        forEngineer: BigNumber;
        forEngineerNoDeposit: BigNumber;
        forDao: BigNumber;
      }
    >;

    jobCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    jobs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        closedBySupplier: boolean;
        closedByEngineer: boolean;
        state: number;
        supplier: string;
        engineer: string;
        token: string;
        depositPct: BigNumber;
        deposit: BigNumber;
        bounty: BigNumber;
        startTime: BigNumber;
        completedTime: BigNumber;
        metadataDigest: BigNumber;
        isReported: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    postJob(
      paymentToken: string,
      bountyValue: BigNumberish,
      depositPct: BigNumberish,
      metadataDigest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reportJob(
      jobId: BigNumberish,
      metadataDigest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reports(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { reporter: string; metadataDigest: BigNumber }
    >;

    resolveDisputeForEngineer(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveDisputeForSupplier(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveDisputeWithCustomSplit(
      jobId: BigNumberish,
      engineerAmountPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDaoFee(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDaoTreasury(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJobTimeout(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBounty(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinChunk(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReportDeposit(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReportReward(
      newPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReportToken(
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResolutionFee(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResolver(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startJob(
      jobId: BigNumberish,
      deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePaymentTokens(
      token: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  COMPLETED_TIMEOUT_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  DAO_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_SPLIT_CHUNK_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  REPORT_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

  REPORT_REWARD_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  REPORT_TOKEN(overrides?: CallOverrides): Promise<string>;

  RESOLUTION_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  acceptReport(
    jobId: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeTimedOutJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoTreasury(overrides?: CallOverrides): Promise<string>;

  declineReport(
    jobId: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputeJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputeResolver(overrides?: CallOverrides): Promise<string>;

  getAllPaymentTokens(overrides?: CallOverrides): Promise<string[]>;

  getDisputePayouts(
    jobId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { forWinner: BigNumber; forDao: BigNumber }
  >;

  getJobPayouts(
    jobId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      forEngineer: BigNumber;
      forEngineerNoDeposit: BigNumber;
      forDao: BigNumber;
    }
  >;

  jobCount(overrides?: CallOverrides): Promise<BigNumber>;

  jobs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      number,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      closedBySupplier: boolean;
      closedByEngineer: boolean;
      state: number;
      supplier: string;
      engineer: string;
      token: string;
      depositPct: BigNumber;
      deposit: BigNumber;
      bounty: BigNumber;
      startTime: BigNumber;
      completedTime: BigNumber;
      metadataDigest: BigNumber;
      isReported: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  postJob(
    paymentToken: string,
    bountyValue: BigNumberish,
    depositPct: BigNumberish,
    metadataDigest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reportJob(
    jobId: BigNumberish,
    metadataDigest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reports(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { reporter: string; metadataDigest: BigNumber }
  >;

  resolveDisputeForEngineer(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveDisputeForSupplier(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveDisputeWithCustomSplit(
    jobId: BigNumberish,
    engineerAmountPct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDaoFee(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDaoTreasury(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJobTimeout(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBounty(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinChunk(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReportDeposit(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReportReward(
    newPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReportToken(
    newToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResolutionFee(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResolver(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startJob(
    jobId: BigNumberish,
    deposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePaymentTokens(
    token: string,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COMPLETED_TIMEOUT_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    DAO_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_SPLIT_CHUNK_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REPORT_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    REPORT_REWARD_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    REPORT_TOKEN(overrides?: CallOverrides): Promise<string>;

    RESOLUTION_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptReport(
      jobId: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    closeJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    completeJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    completeTimedOutJob(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    daoTreasury(overrides?: CallOverrides): Promise<string>;

    declineReport(
      jobId: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disputeJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    disputeResolver(overrides?: CallOverrides): Promise<string>;

    getAllPaymentTokens(overrides?: CallOverrides): Promise<string[]>;

    getDisputePayouts(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { forWinner: BigNumber; forDao: BigNumber }
    >;

    getJobPayouts(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        forEngineer: BigNumber;
        forEngineerNoDeposit: BigNumber;
        forDao: BigNumber;
      }
    >;

    jobCount(overrides?: CallOverrides): Promise<BigNumber>;

    jobs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        closedBySupplier: boolean;
        closedByEngineer: boolean;
        state: number;
        supplier: string;
        engineer: string;
        token: string;
        depositPct: BigNumber;
        deposit: BigNumber;
        bounty: BigNumber;
        startTime: BigNumber;
        completedTime: BigNumber;
        metadataDigest: BigNumber;
        isReported: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    postJob(
      paymentToken: string,
      bountyValue: BigNumberish,
      depositPct: BigNumberish,
      metadataDigest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reportJob(
      jobId: BigNumberish,
      metadataDigest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reports(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { reporter: string; metadataDigest: BigNumber }
    >;

    resolveDisputeForEngineer(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveDisputeForSupplier(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveDisputeWithCustomSplit(
      jobId: BigNumberish,
      engineerAmountPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoFee(newValue: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDaoTreasury(addr: string, overrides?: CallOverrides): Promise<void>;

    setJobTimeout(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBounty(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinChunk(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportDeposit(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportReward(
      newPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportToken(newToken: string, overrides?: CallOverrides): Promise<void>;

    setResolutionFee(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setResolver(addr: string, overrides?: CallOverrides): Promise<void>;

    startJob(
      jobId: BigNumberish,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePaymentTokens(
      token: string,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "JobApproved(uint256,uint256)"(
      jobId?: BigNumberish | null,
      payoutAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; payoutAmount: BigNumber }
    >;

    JobApproved(
      jobId?: BigNumberish | null,
      payoutAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; payoutAmount: BigNumber }
    >;

    "JobCanceled(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobCanceled(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobClosed(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobClosed(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobClosedByEngineer(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobClosedByEngineer(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobClosedBySupplier(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobClosedBySupplier(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobCompleted(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobCompleted(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobDelisted(uint256,address,string)"(
      jobId?: BigNumberish | null,
      reporter?: null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { jobId: BigNumber; reporter: string; reason: string }
    >;

    JobDelisted(
      jobId?: BigNumberish | null,
      reporter?: null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { jobId: BigNumber; reporter: string; reason: string }
    >;

    "JobDisputeResolved(uint256,uint8)"(
      jobId?: BigNumberish | null,
      finalState?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { jobId: BigNumber; finalState: number }
    >;

    JobDisputeResolved(
      jobId?: BigNumberish | null,
      finalState?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { jobId: BigNumber; finalState: number }
    >;

    "JobDisputed(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobDisputed(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobPosted(uint256,uint256)"(
      jobId?: BigNumberish | null,
      metadataDigest?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; metadataDigest: BigNumber }
    >;

    JobPosted(
      jobId?: BigNumberish | null,
      metadataDigest?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; metadataDigest: BigNumber }
    >;

    "JobReportDeclined(uint256,address,string)"(
      jobId?: BigNumberish | null,
      reporter?: null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { jobId: BigNumber; reporter: string; reason: string }
    >;

    JobReportDeclined(
      jobId?: BigNumberish | null,
      reporter?: null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { jobId: BigNumber; reporter: string; reason: string }
    >;

    "JobReported(uint256,address,uint256)"(
      jobId?: BigNumberish | null,
      reporter?: null,
      metadataDigest?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { jobId: BigNumber; reporter: string; metadataDigest: BigNumber }
    >;

    JobReported(
      jobId?: BigNumberish | null,
      reporter?: null,
      metadataDigest?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { jobId: BigNumber; reporter: string; metadataDigest: BigNumber }
    >;

    "JobStarted(address,uint256)"(
      engineer?: string | null,
      jobId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { engineer: string; jobId: BigNumber }
    >;

    JobStarted(
      engineer?: string | null,
      jobId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { engineer: string; jobId: BigNumber }
    >;

    "JobSupplied(address,uint256)"(
      supplier?: string | null,
      jobId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { supplier: string; jobId: BigNumber }
    >;

    JobSupplied(
      supplier?: string | null,
      jobId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { supplier: string; jobId: BigNumber }
    >;

    "JobTimeoutPayout(uint256,uint256)"(
      jobId?: BigNumberish | null,
      payoutAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; payoutAmount: BigNumber }
    >;

    JobTimeoutPayout(
      jobId?: BigNumberish | null,
      payoutAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; payoutAmount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PaymentTokensUpdated(address,bool)"(
      token?: string | null,
      value?: boolean | null
    ): TypedEventFilter<[string, boolean], { token: string; value: boolean }>;

    PaymentTokensUpdated(
      token?: string | null,
      value?: boolean | null
    ): TypedEventFilter<[string, boolean], { token: string; value: boolean }>;
  };

  estimateGas: {
    COMPLETED_TIMEOUT_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    DAO_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_SPLIT_CHUNK_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REPORT_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    REPORT_REWARD_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    REPORT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    RESOLUTION_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptReport(
      jobId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeTimedOutJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    declineReport(
      jobId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputeResolver(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPaymentTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getDisputePayouts(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJobPayouts(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobCount(overrides?: CallOverrides): Promise<BigNumber>;

    jobs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    postJob(
      paymentToken: string,
      bountyValue: BigNumberish,
      depositPct: BigNumberish,
      metadataDigest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reportJob(
      jobId: BigNumberish,
      metadataDigest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reports(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    resolveDisputeForEngineer(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveDisputeForSupplier(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveDisputeWithCustomSplit(
      jobId: BigNumberish,
      engineerAmountPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDaoFee(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDaoTreasury(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJobTimeout(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBounty(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinChunk(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReportDeposit(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReportReward(
      newPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReportToken(
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResolutionFee(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResolver(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startJob(
      jobId: BigNumberish,
      deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePaymentTokens(
      token: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COMPLETED_TIMEOUT_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DAO_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_BOUNTY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_SPLIT_CHUNK_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REPORT_DEPOSIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REPORT_REWARD_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REPORT_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESOLUTION_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptReport(
      jobId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeTimedOutJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    declineReport(
      jobId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputeResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPaymentTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputePayouts(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJobPayouts(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postJob(
      paymentToken: string,
      bountyValue: BigNumberish,
      depositPct: BigNumberish,
      metadataDigest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reportJob(
      jobId: BigNumberish,
      metadataDigest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reports(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveDisputeForEngineer(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveDisputeForSupplier(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveDisputeWithCustomSplit(
      jobId: BigNumberish,
      engineerAmountPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDaoFee(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDaoTreasury(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJobTimeout(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBounty(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinChunk(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReportDeposit(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReportReward(
      newPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReportToken(
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResolutionFee(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResolver(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startJob(
      jobId: BigNumberish,
      deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePaymentTokens(
      token: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
